/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.healthvault.restapi;

import com.microsoft.healthvault.restapi.models.ErrorResponseException;
import com.microsoft.healthvault.restapi.models.Goal;
import com.microsoft.healthvault.restapi.models.GoalsResponse;
import com.microsoft.healthvault.restapi.models.GoalsWrapper;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.UUID;
import org.joda.time.DateTime;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Goals.
 */
public interface Goals {
    /**
     * Get an instance of a specific goal.
     *
     * @param goalId The goal identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Goal object if successful.
     */
    Goal getById(UUID goalId);

    /**
     * Get an instance of a specific goal.
     *
     * @param goalId The goal identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Goal> getByIdAsync(UUID goalId, final ServiceCallback<Goal> serviceCallback);

    /**
     * Get an instance of a specific goal.
     *
     * @param goalId The goal identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Goal object
     */
    Observable<Goal> getByIdAsync(UUID goalId);

    /**
     * Get an instance of a specific goal.
     *
     * @param goalId The goal identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Goal object
     */
    Observable<ServiceResponse<Goal>> getByIdWithServiceResponseAsync(UUID goalId);

    /**
     * Delete a goal instance.
     *
     * @param goalId The identifier of the goal to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(UUID goalId);

    /**
     * Delete a goal instance.
     *
     * @param goalId The identifier of the goal to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAsync(UUID goalId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a goal instance.
     *
     * @param goalId The identifier of the goal to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteAsync(UUID goalId);

    /**
     * Delete a goal instance.
     *
     * @param goalId The identifier of the goal to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(UUID goalId);

    /**
     * Get a collection of the active goals.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GoalsResponse object if successful.
     */
    GoalsResponse getActive();

    /**
     * Get a collection of the active goals.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<GoalsResponse> getActiveAsync(final ServiceCallback<GoalsResponse> serviceCallback);

    /**
     * Get a collection of the active goals.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<GoalsResponse> getActiveAsync();

    /**
     * Get a collection of the active goals.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<ServiceResponse<GoalsResponse>> getActiveWithServiceResponseAsync();
    /**
     * Get a collection of the active goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GoalsResponse object if successful.
     */
    GoalsResponse getActive(String types, String windowTypes);

    /**
     * Get a collection of the active goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<GoalsResponse> getActiveAsync(String types, String windowTypes, final ServiceCallback<GoalsResponse> serviceCallback);

    /**
     * Get a collection of the active goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<GoalsResponse> getActiveAsync(String types, String windowTypes);

    /**
     * Get a collection of the active goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<ServiceResponse<GoalsResponse>> getActiveWithServiceResponseAsync(String types, String windowTypes);

    /**
     * Get a collection of all goals.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GoalsResponse object if successful.
     */
    GoalsResponse get();

    /**
     * Get a collection of all goals.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<GoalsResponse> getAsync(final ServiceCallback<GoalsResponse> serviceCallback);

    /**
     * Get a collection of all goals.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<GoalsResponse> getAsync();

    /**
     * Get a collection of all goals.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<ServiceResponse<GoalsResponse>> getWithServiceResponseAsync();
    /**
     * Get a collection of all goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @param startDate The start date for date range filter.
     * @param endDate The end date for date range filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GoalsResponse object if successful.
     */
    GoalsResponse get(String types, String windowTypes, DateTime startDate, DateTime endDate);

    /**
     * Get a collection of all goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @param startDate The start date for date range filter.
     * @param endDate The end date for date range filter.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<GoalsResponse> getAsync(String types, String windowTypes, DateTime startDate, DateTime endDate, final ServiceCallback<GoalsResponse> serviceCallback);

    /**
     * Get a collection of all goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @param startDate The start date for date range filter.
     * @param endDate The end date for date range filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<GoalsResponse> getAsync(String types, String windowTypes, DateTime startDate, DateTime endDate);

    /**
     * Get a collection of all goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @param startDate The start date for date range filter.
     * @param endDate The end date for date range filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<ServiceResponse<GoalsResponse>> getWithServiceResponseAsync(String types, String windowTypes, DateTime startDate, DateTime endDate);

    /**
     * Update/Replace a complete goal instance with no merge.
     *
     * @param goal The instance of the goal to update. The entire goal will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Goal object if successful.
     */
    Goal replace(Goal goal);

    /**
     * Update/Replace a complete goal instance with no merge.
     *
     * @param goal The instance of the goal to update. The entire goal will be replaced with this version.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Goal> replaceAsync(Goal goal, final ServiceCallback<Goal> serviceCallback);

    /**
     * Update/Replace a complete goal instance with no merge.
     *
     * @param goal The instance of the goal to update. The entire goal will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Goal object
     */
    Observable<Goal> replaceAsync(Goal goal);

    /**
     * Update/Replace a complete goal instance with no merge.
     *
     * @param goal The instance of the goal to update. The entire goal will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Goal object
     */
    Observable<ServiceResponse<Goal>> replaceWithServiceResponseAsync(Goal goal);

    /**
     * Post a collection of goal instances.
     *
     * @param goalsWrapper The collection of goal instances to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GoalsResponse object if successful.
     */
    GoalsResponse create(GoalsWrapper goalsWrapper);

    /**
     * Post a collection of goal instances.
     *
     * @param goalsWrapper The collection of goal instances to create.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<GoalsResponse> createAsync(GoalsWrapper goalsWrapper, final ServiceCallback<GoalsResponse> serviceCallback);

    /**
     * Post a collection of goal instances.
     *
     * @param goalsWrapper The collection of goal instances to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<GoalsResponse> createAsync(GoalsWrapper goalsWrapper);

    /**
     * Post a collection of goal instances.
     *
     * @param goalsWrapper The collection of goal instances to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<ServiceResponse<GoalsResponse>> createWithServiceResponseAsync(GoalsWrapper goalsWrapper);

    /**
     * Update collection of goal instances with merge.
     *
     * @param goalsWrapper The collection of goal instances to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GoalsResponse object if successful.
     */
    GoalsResponse update(GoalsWrapper goalsWrapper);

    /**
     * Update collection of goal instances with merge.
     *
     * @param goalsWrapper The collection of goal instances to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<GoalsResponse> updateAsync(GoalsWrapper goalsWrapper, final ServiceCallback<GoalsResponse> serviceCallback);

    /**
     * Update collection of goal instances with merge.
     *
     * @param goalsWrapper The collection of goal instances to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<GoalsResponse> updateAsync(GoalsWrapper goalsWrapper);

    /**
     * Update collection of goal instances with merge.
     *
     * @param goalsWrapper The collection of goal instances to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<ServiceResponse<GoalsResponse>> updateWithServiceResponseAsync(GoalsWrapper goalsWrapper);

}
