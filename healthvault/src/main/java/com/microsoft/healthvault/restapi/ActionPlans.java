/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.healthvault.restapi;

import com.microsoft.healthvault.restapi.models.ActionPlan;
import com.microsoft.healthvault.restapi.models.ActionPlanAdherenceSummary;
import com.microsoft.healthvault.restapi.models.ActionPlanInstance;
import com.microsoft.healthvault.restapi.models.ActionPlansResponseActionPlanInstance;
import com.microsoft.healthvault.restapi.models.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.UUID;
import org.joda.time.DateTime;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ActionPlans.
 */
public interface ActionPlans {
    /**
     * Get an instance of a specific action plan.
     *
     * @param actionPlanId The action plan to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanInstance object if successful.
     */
    ActionPlanInstance getById(UUID actionPlanId);

    /**
     * Get an instance of a specific action plan.
     *
     * @param actionPlanId The action plan to update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanInstance> getByIdAsync(UUID actionPlanId, final ServiceCallback<ActionPlanInstance> serviceCallback);

    /**
     * Get an instance of a specific action plan.
     *
     * @param actionPlanId The action plan to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanInstance object
     */
    Observable<ActionPlanInstance> getByIdAsync(UUID actionPlanId);

    /**
     * Get an instance of a specific action plan.
     *
     * @param actionPlanId The action plan to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanInstance object
     */
    Observable<ServiceResponse<ActionPlanInstance>> getByIdWithServiceResponseAsync(UUID actionPlanId);

    /**
     * Delete an action plan instance.
     *
     * @param actionPlanId The instance of the plan to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(UUID actionPlanId);

    /**
     * Delete an action plan instance.
     *
     * @param actionPlanId The instance of the plan to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAsync(UUID actionPlanId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete an action plan instance.
     *
     * @param actionPlanId The instance of the plan to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteAsync(UUID actionPlanId);

    /**
     * Delete an action plan instance.
     *
     * @param actionPlanId The instance of the plan to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(UUID actionPlanId);

    /**
     * Get a collection of action plans.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlansResponseActionPlanInstance object if successful.
     */
    ActionPlansResponseActionPlanInstance get();

    /**
     * Get a collection of action plans.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlansResponseActionPlanInstance> getAsync(final ServiceCallback<ActionPlansResponseActionPlanInstance> serviceCallback);

    /**
     * Get a collection of action plans.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstance object
     */
    Observable<ActionPlansResponseActionPlanInstance> getAsync();

    /**
     * Get a collection of action plans.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstance object
     */
    Observable<ServiceResponse<ActionPlansResponseActionPlanInstance>> getWithServiceResponseAsync();
    /**
     * Get a collection of action plans.
     *
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlansResponseActionPlanInstance object if successful.
     */
    ActionPlansResponseActionPlanInstance get(Integer maxPageSize);

    /**
     * Get a collection of action plans.
     *
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlansResponseActionPlanInstance> getAsync(Integer maxPageSize, final ServiceCallback<ActionPlansResponseActionPlanInstance> serviceCallback);

    /**
     * Get a collection of action plans.
     *
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstance object
     */
    Observable<ActionPlansResponseActionPlanInstance> getAsync(Integer maxPageSize);

    /**
     * Get a collection of action plans.
     *
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstance object
     */
    Observable<ServiceResponse<ActionPlansResponseActionPlanInstance>> getWithServiceResponseAsync(Integer maxPageSize);

    /**
     * Update/Replace a complete action plan instance with no merge.
     *
     * @param actionPlan The instance of the plan to update. The entire plan will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanInstance object if successful.
     */
    ActionPlanInstance replace(ActionPlanInstance actionPlan);

    /**
     * Update/Replace a complete action plan instance with no merge.
     *
     * @param actionPlan The instance of the plan to update. The entire plan will be replaced with this version.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanInstance> replaceAsync(ActionPlanInstance actionPlan, final ServiceCallback<ActionPlanInstance> serviceCallback);

    /**
     * Update/Replace a complete action plan instance with no merge.
     *
     * @param actionPlan The instance of the plan to update. The entire plan will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanInstance object
     */
    Observable<ActionPlanInstance> replaceAsync(ActionPlanInstance actionPlan);

    /**
     * Update/Replace a complete action plan instance with no merge.
     *
     * @param actionPlan The instance of the plan to update. The entire plan will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanInstance object
     */
    Observable<ServiceResponse<ActionPlanInstance>> replaceWithServiceResponseAsync(ActionPlanInstance actionPlan);

    /**
     * Post an action plan instance.
     *
     * @param actionPlan The instance of the plan to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanInstance object if successful.
     */
    ActionPlanInstance create(ActionPlan actionPlan);

    /**
     * Post an action plan instance.
     *
     * @param actionPlan The instance of the plan to create.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanInstance> createAsync(ActionPlan actionPlan, final ServiceCallback<ActionPlanInstance> serviceCallback);

    /**
     * Post an action plan instance.
     *
     * @param actionPlan The instance of the plan to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanInstance object
     */
    Observable<ActionPlanInstance> createAsync(ActionPlan actionPlan);

    /**
     * Post an action plan instance.
     *
     * @param actionPlan The instance of the plan to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanInstance object
     */
    Observable<ServiceResponse<ActionPlanInstance>> createWithServiceResponseAsync(ActionPlan actionPlan);

    /**
     * Update an action plan instance with merge.
     *
     * @param actionPlan The instance of the plan to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanInstance object if successful.
     */
    ActionPlanInstance update(ActionPlanInstance actionPlan);

    /**
     * Update an action plan instance with merge.
     *
     * @param actionPlan The instance of the plan to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanInstance> updateAsync(ActionPlanInstance actionPlan, final ServiceCallback<ActionPlanInstance> serviceCallback);

    /**
     * Update an action plan instance with merge.
     *
     * @param actionPlan The instance of the plan to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanInstance object
     */
    Observable<ActionPlanInstance> updateAsync(ActionPlanInstance actionPlan);

    /**
     * Update an action plan instance with merge.
     *
     * @param actionPlan The instance of the plan to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanInstance object
     */
    Observable<ServiceResponse<ActionPlanInstance>> updateWithServiceResponseAsync(ActionPlanInstance actionPlan);

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanAdherenceSummary object if successful.
     */
    ActionPlanAdherenceSummary getAdherence(DateTime startTime, DateTime endTime, UUID actionPlanId);

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanAdherenceSummary> getAdherenceAsync(DateTime startTime, DateTime endTime, UUID actionPlanId, final ServiceCallback<ActionPlanAdherenceSummary> serviceCallback);

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanAdherenceSummary object
     */
    Observable<ActionPlanAdherenceSummary> getAdherenceAsync(DateTime startTime, DateTime endTime, UUID actionPlanId);

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanAdherenceSummary object
     */
    Observable<ServiceResponse<ActionPlanAdherenceSummary>> getAdherenceWithServiceResponseAsync(DateTime startTime, DateTime endTime, UUID actionPlanId);
    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param objectiveId The objective to filter the report to.
     * @param taskId The task to filter the report to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanAdherenceSummary object if successful.
     */
    ActionPlanAdherenceSummary getAdherence(DateTime startTime, DateTime endTime, UUID actionPlanId, UUID objectiveId, UUID taskId);

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param objectiveId The objective to filter the report to.
     * @param taskId The task to filter the report to.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanAdherenceSummary> getAdherenceAsync(DateTime startTime, DateTime endTime, UUID actionPlanId, UUID objectiveId, UUID taskId, final ServiceCallback<ActionPlanAdherenceSummary> serviceCallback);

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param objectiveId The objective to filter the report to.
     * @param taskId The task to filter the report to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanAdherenceSummary object
     */
    Observable<ActionPlanAdherenceSummary> getAdherenceAsync(DateTime startTime, DateTime endTime, UUID actionPlanId, UUID objectiveId, UUID taskId);

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param objectiveId The objective to filter the report to.
     * @param taskId The task to filter the report to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanAdherenceSummary object
     */
    Observable<ServiceResponse<ActionPlanAdherenceSummary>> getAdherenceWithServiceResponseAsync(DateTime startTime, DateTime endTime, UUID actionPlanId, UUID objectiveId, UUID taskId);

}
