/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.healthvault.restapi.implementation;

import retrofit2.Retrofit;
import com.microsoft.healthvault.restapi.Sleeps;
import com.google.common.reflect.TypeToken;
import com.microsoft.healthvault.restapi.models.ErrorResponseException;
import com.microsoft.healthvault.restapi.models.SleepResponse;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import org.joda.time.DateTime;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Sleeps.
 */
public class SleepsImpl implements Sleeps {
    /** The Retrofit service to perform REST calls. */
    private SleepsService service;
    /** The service client containing this operation class. */
    private MicrosoftHealthVaultRESTAPIImpl client;

    /**
     * Initializes an instance of Sleeps.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public SleepsImpl(Retrofit retrofit, MicrosoftHealthVaultRESTAPIImpl client) {
        this.service = retrofit.create(SleepsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Sleeps to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SleepsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.healthvault.restapi.Sleeps get" })
        @GET("Sleeps")
        Observable<Response<ResponseBody>> get(@Query("startTime") DateTime startTime, @Query("endTime") DateTime endTime, @Query("includeDetails") String includeDetails, @Query("maxPageSize") Integer maxPageSize);

    }

    /**
     * Get the Sleep Activity data for this user by date range.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SleepResponse object if successful.
     */
    public SleepResponse get() {
        return getWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Get the Sleep Activity data for this user by date range.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SleepResponse> getAsync(final ServiceCallback<SleepResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get the Sleep Activity data for this user by date range.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SleepResponse object
     */
    public Observable<SleepResponse> getAsync() {
        return getWithServiceResponseAsync().map(new Func1<ServiceResponse<SleepResponse>, SleepResponse>() {
            @Override
            public SleepResponse call(ServiceResponse<SleepResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the Sleep Activity data for this user by date range.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SleepResponse object
     */
    public Observable<ServiceResponse<SleepResponse>> getWithServiceResponseAsync() {
        final DateTime startTime = null;
        final DateTime endTime = null;
        final String includeDetails = null;
        final Integer maxPageSize = null;
        return service.get(startTime, endTime, includeDetails, maxPageSize)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SleepResponse>>>() {
                @Override
                public Observable<ServiceResponse<SleepResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SleepResponse> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get the Sleep Activity data for this user by date range.
     *
     * @param startTime The ISO 8601 formatted start time of the Sleep activities, inclusive.
     * @param endTime The ISO 8601 formatted end time of the Sleep activities, exclusive.  Defaults to the current time in UTC.
     * @param includeDetails comma separated string to additional details. Available values Basic, Full. Default - Basic
     * @param maxPageSize The maximum number of entries to return per page.  Defaults to 31
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SleepResponse object if successful.
     */
    public SleepResponse get(DateTime startTime, DateTime endTime, String includeDetails, Integer maxPageSize) {
        return getWithServiceResponseAsync(startTime, endTime, includeDetails, maxPageSize).toBlocking().single().body();
    }

    /**
     * Get the Sleep Activity data for this user by date range.
     *
     * @param startTime The ISO 8601 formatted start time of the Sleep activities, inclusive.
     * @param endTime The ISO 8601 formatted end time of the Sleep activities, exclusive.  Defaults to the current time in UTC.
     * @param includeDetails comma separated string to additional details. Available values Basic, Full. Default - Basic
     * @param maxPageSize The maximum number of entries to return per page.  Defaults to 31
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SleepResponse> getAsync(DateTime startTime, DateTime endTime, String includeDetails, Integer maxPageSize, final ServiceCallback<SleepResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(startTime, endTime, includeDetails, maxPageSize), serviceCallback);
    }

    /**
     * Get the Sleep Activity data for this user by date range.
     *
     * @param startTime The ISO 8601 formatted start time of the Sleep activities, inclusive.
     * @param endTime The ISO 8601 formatted end time of the Sleep activities, exclusive.  Defaults to the current time in UTC.
     * @param includeDetails comma separated string to additional details. Available values Basic, Full. Default - Basic
     * @param maxPageSize The maximum number of entries to return per page.  Defaults to 31
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SleepResponse object
     */
    public Observable<SleepResponse> getAsync(DateTime startTime, DateTime endTime, String includeDetails, Integer maxPageSize) {
        return getWithServiceResponseAsync(startTime, endTime, includeDetails, maxPageSize).map(new Func1<ServiceResponse<SleepResponse>, SleepResponse>() {
            @Override
            public SleepResponse call(ServiceResponse<SleepResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the Sleep Activity data for this user by date range.
     *
     * @param startTime The ISO 8601 formatted start time of the Sleep activities, inclusive.
     * @param endTime The ISO 8601 formatted end time of the Sleep activities, exclusive.  Defaults to the current time in UTC.
     * @param includeDetails comma separated string to additional details. Available values Basic, Full. Default - Basic
     * @param maxPageSize The maximum number of entries to return per page.  Defaults to 31
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SleepResponse object
     */
    public Observable<ServiceResponse<SleepResponse>> getWithServiceResponseAsync(DateTime startTime, DateTime endTime, String includeDetails, Integer maxPageSize) {
        return service.get(startTime, endTime, includeDetails, maxPageSize)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SleepResponse>>>() {
                @Override
                public Observable<ServiceResponse<SleepResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SleepResponse> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SleepResponse> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException {
        return this.client.restClient().responseBuilderFactory().<SleepResponse, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SleepResponse>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
