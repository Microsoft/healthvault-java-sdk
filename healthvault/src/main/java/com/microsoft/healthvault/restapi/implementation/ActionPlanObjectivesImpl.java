/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.healthvault.restapi.implementation;

import retrofit2.Retrofit;
import com.microsoft.healthvault.restapi.ActionPlanObjectives;
import com.google.common.reflect.TypeToken;
import com.microsoft.healthvault.restapi.models.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.UUID;
import okhttp3.ResponseBody;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ActionPlanObjectives.
 */
public class ActionPlanObjectivesImpl implements ActionPlanObjectives {
    /** The Retrofit service to perform REST calls. */
    private ActionPlanObjectivesService service;
    /** The service client containing this operation class. */
    private MicrosoftHealthVaultRESTAPIImpl client;

    /**
     * Initializes an instance of ActionPlanObjectives.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ActionPlanObjectivesImpl(Retrofit retrofit, MicrosoftHealthVaultRESTAPIImpl client) {
        this.service = retrofit.create(ActionPlanObjectivesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ActionPlanObjectives to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ActionPlanObjectivesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.healthvault.restapi.ActionPlanObjectives delete" })
        @HTTP(path = "ActionPlans/{actionPlanId}/Objectives/{objectiveId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("actionPlanId") UUID actionPlanId, @Path("objectiveId") UUID objectiveId);

    }

    /**
     * Remove an action plan objective.
     *
     * @param actionPlanId The instance of the plan that the objective belongs to.
     * @param objectiveId The instance of the objective to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(UUID actionPlanId, UUID objectiveId) {
        deleteWithServiceResponseAsync(actionPlanId, objectiveId).toBlocking().single().body();
    }

    /**
     * Remove an action plan objective.
     *
     * @param actionPlanId The instance of the plan that the objective belongs to.
     * @param objectiveId The instance of the objective to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(UUID actionPlanId, UUID objectiveId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(actionPlanId, objectiveId), serviceCallback);
    }

    /**
     * Remove an action plan objective.
     *
     * @param actionPlanId The instance of the plan that the objective belongs to.
     * @param objectiveId The instance of the objective to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(UUID actionPlanId, UUID objectiveId) {
        return deleteWithServiceResponseAsync(actionPlanId, objectiveId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Remove an action plan objective.
     *
     * @param actionPlanId The instance of the plan that the objective belongs to.
     * @param objectiveId The instance of the objective to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(UUID actionPlanId, UUID objectiveId) {
        if (actionPlanId == null) {
            throw new IllegalArgumentException("Parameter actionPlanId is required and cannot be null.");
        }
        if (objectiveId == null) {
            throw new IllegalArgumentException("Parameter objectiveId is required and cannot be null.");
        }
        return service.delete(actionPlanId, objectiveId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
