/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.healthvault.restapi;

import com.microsoft.healthvault.restapi.models.ErrorResponseException;
import com.microsoft.healthvault.restapi.models.SleepResponse;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import org.joda.time.DateTime;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Sleeps.
 */
public interface Sleeps {
    /**
     * Get the Sleep Activity data for this user by date range.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SleepResponse object if successful.
     */
    SleepResponse get();

    /**
     * Get the Sleep Activity data for this user by date range.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SleepResponse> getAsync(final ServiceCallback<SleepResponse> serviceCallback);

    /**
     * Get the Sleep Activity data for this user by date range.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SleepResponse object
     */
    Observable<SleepResponse> getAsync();

    /**
     * Get the Sleep Activity data for this user by date range.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SleepResponse object
     */
    Observable<ServiceResponse<SleepResponse>> getWithServiceResponseAsync();
    /**
     * Get the Sleep Activity data for this user by date range.
     *
     * @param startTime The ISO 8601 formatted start time of the Sleep activities, inclusive.
     * @param endTime The ISO 8601 formatted end time of the Sleep activities, exclusive.  Defaults to the current time in UTC.
     * @param includeDetails comma separated string to additional details. Available values Basic, Full. Default - Basic
     * @param maxPageSize The maximum number of entries to return per page.  Defaults to 31
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SleepResponse object if successful.
     */
    SleepResponse get(DateTime startTime, DateTime endTime, String includeDetails, Integer maxPageSize);

    /**
     * Get the Sleep Activity data for this user by date range.
     *
     * @param startTime The ISO 8601 formatted start time of the Sleep activities, inclusive.
     * @param endTime The ISO 8601 formatted end time of the Sleep activities, exclusive.  Defaults to the current time in UTC.
     * @param includeDetails comma separated string to additional details. Available values Basic, Full. Default - Basic
     * @param maxPageSize The maximum number of entries to return per page.  Defaults to 31
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SleepResponse> getAsync(DateTime startTime, DateTime endTime, String includeDetails, Integer maxPageSize, final ServiceCallback<SleepResponse> serviceCallback);

    /**
     * Get the Sleep Activity data for this user by date range.
     *
     * @param startTime The ISO 8601 formatted start time of the Sleep activities, inclusive.
     * @param endTime The ISO 8601 formatted end time of the Sleep activities, exclusive.  Defaults to the current time in UTC.
     * @param includeDetails comma separated string to additional details. Available values Basic, Full. Default - Basic
     * @param maxPageSize The maximum number of entries to return per page.  Defaults to 31
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SleepResponse object
     */
    Observable<SleepResponse> getAsync(DateTime startTime, DateTime endTime, String includeDetails, Integer maxPageSize);

    /**
     * Get the Sleep Activity data for this user by date range.
     *
     * @param startTime The ISO 8601 formatted start time of the Sleep activities, inclusive.
     * @param endTime The ISO 8601 formatted end time of the Sleep activities, exclusive.  Defaults to the current time in UTC.
     * @param includeDetails comma separated string to additional details. Available values Basic, Full. Default - Basic
     * @param maxPageSize The maximum number of entries to return per page.  Defaults to 31
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SleepResponse object
     */
    Observable<ServiceResponse<SleepResponse>> getWithServiceResponseAsync(DateTime startTime, DateTime endTime, String includeDetails, Integer maxPageSize);

}
