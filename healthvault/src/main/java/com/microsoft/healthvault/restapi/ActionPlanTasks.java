/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.healthvault.restapi;

import com.microsoft.healthvault.restapi.models.ActionPlanTask;
import com.microsoft.healthvault.restapi.models.ActionPlanTaskInstance;
import com.microsoft.healthvault.restapi.models.ActionPlanTasksResponseActionPlanTaskInstance;
import com.microsoft.healthvault.restapi.models.ActionPlanTaskTrackingResponseActionPlanTaskTracking;
import com.microsoft.healthvault.restapi.models.ErrorResponseException;
import com.microsoft.healthvault.restapi.models.TrackingValidation;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.UUID;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ActionPlanTasks.
 */
public interface ActionPlanTasks {
    /**
     * Get a task by id.
     *
     * @param actionPlanTaskId The unique identifer of the task.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTaskInstance object if successful.
     */
    ActionPlanTaskInstance getById(UUID actionPlanTaskId);

    /**
     * Get a task by id.
     *
     * @param actionPlanTaskId The unique identifer of the task.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanTaskInstance> getByIdAsync(UUID actionPlanTaskId, final ServiceCallback<ActionPlanTaskInstance> serviceCallback);

    /**
     * Get a task by id.
     *
     * @param actionPlanTaskId The unique identifer of the task.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskInstance object
     */
    Observable<ActionPlanTaskInstance> getByIdAsync(UUID actionPlanTaskId);

    /**
     * Get a task by id.
     *
     * @param actionPlanTaskId The unique identifer of the task.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskInstance object
     */
    Observable<ServiceResponse<ActionPlanTaskInstance>> getByIdWithServiceResponseAsync(UUID actionPlanTaskId);

    /**
     * Delete a task by id.
     *
     * @param actionPlanTaskId The unique identifer of the task.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(UUID actionPlanTaskId);

    /**
     * Delete a task by id.
     *
     * @param actionPlanTaskId The unique identifer of the task.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAsync(UUID actionPlanTaskId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a task by id.
     *
     * @param actionPlanTaskId The unique identifer of the task.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteAsync(UUID actionPlanTaskId);

    /**
     * Delete a task by id.
     *
     * @param actionPlanTaskId The unique identifer of the task.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(UUID actionPlanTaskId);

    /**
     * Get a collection of task definitions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTasksResponseActionPlanTaskInstance object if successful.
     */
    ActionPlanTasksResponseActionPlanTaskInstance get();

    /**
     * Get a collection of task definitions.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanTasksResponseActionPlanTaskInstance> getAsync(final ServiceCallback<ActionPlanTasksResponseActionPlanTaskInstance> serviceCallback);

    /**
     * Get a collection of task definitions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    Observable<ActionPlanTasksResponseActionPlanTaskInstance> getAsync();

    /**
     * Get a collection of task definitions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>> getWithServiceResponseAsync();
    /**
     * Get a collection of task definitions.
     *
     * @param actionPlanTaskStatus An optional status used to filter the results. Possible values include: 'Unknown', 'Archived', 'InProgress', 'Recommended', 'Completed', 'Template'
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTasksResponseActionPlanTaskInstance object if successful.
     */
    ActionPlanTasksResponseActionPlanTaskInstance get(String actionPlanTaskStatus, Integer maxPageSize);

    /**
     * Get a collection of task definitions.
     *
     * @param actionPlanTaskStatus An optional status used to filter the results. Possible values include: 'Unknown', 'Archived', 'InProgress', 'Recommended', 'Completed', 'Template'
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanTasksResponseActionPlanTaskInstance> getAsync(String actionPlanTaskStatus, Integer maxPageSize, final ServiceCallback<ActionPlanTasksResponseActionPlanTaskInstance> serviceCallback);

    /**
     * Get a collection of task definitions.
     *
     * @param actionPlanTaskStatus An optional status used to filter the results. Possible values include: 'Unknown', 'Archived', 'InProgress', 'Recommended', 'Completed', 'Template'
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    Observable<ActionPlanTasksResponseActionPlanTaskInstance> getAsync(String actionPlanTaskStatus, Integer maxPageSize);

    /**
     * Get a collection of task definitions.
     *
     * @param actionPlanTaskStatus An optional status used to filter the results. Possible values include: 'Unknown', 'Archived', 'InProgress', 'Recommended', 'Completed', 'Template'
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>> getWithServiceResponseAsync(String actionPlanTaskStatus, Integer maxPageSize);

    /**
     * Put an update for an action plan task.
     *
     * @param actionPlanTask The updated action plan task.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTaskInstance object if successful.
     */
    ActionPlanTaskInstance replace(ActionPlanTaskInstance actionPlanTask);

    /**
     * Put an update for an action plan task.
     *
     * @param actionPlanTask The updated action plan task.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanTaskInstance> replaceAsync(ActionPlanTaskInstance actionPlanTask, final ServiceCallback<ActionPlanTaskInstance> serviceCallback);

    /**
     * Put an update for an action plan task.
     *
     * @param actionPlanTask The updated action plan task.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskInstance object
     */
    Observable<ActionPlanTaskInstance> replaceAsync(ActionPlanTaskInstance actionPlanTask);

    /**
     * Put an update for an action plan task.
     *
     * @param actionPlanTask The updated action plan task.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskInstance object
     */
    Observable<ServiceResponse<ActionPlanTaskInstance>> replaceWithServiceResponseAsync(ActionPlanTaskInstance actionPlanTask);

    /**
     * Post a new action plan task.
     *
     * @param actionPlanTask The action plan task to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTaskInstance object if successful.
     */
    ActionPlanTaskInstance create(ActionPlanTask actionPlanTask);

    /**
     * Post a new action plan task.
     *
     * @param actionPlanTask The action plan task to create.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanTaskInstance> createAsync(ActionPlanTask actionPlanTask, final ServiceCallback<ActionPlanTaskInstance> serviceCallback);

    /**
     * Post a new action plan task.
     *
     * @param actionPlanTask The action plan task to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskInstance object
     */
    Observable<ActionPlanTaskInstance> createAsync(ActionPlanTask actionPlanTask);

    /**
     * Post a new action plan task.
     *
     * @param actionPlanTask The action plan task to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskInstance object
     */
    Observable<ServiceResponse<ActionPlanTaskInstance>> createWithServiceResponseAsync(ActionPlanTask actionPlanTask);

    /**
     * Patch an update for an action plan task.
     *
     * @param actionPlanTask The updated task
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTaskInstance object if successful.
     */
    ActionPlanTaskInstance update(ActionPlanTaskInstance actionPlanTask);

    /**
     * Patch an update for an action plan task.
     *
     * @param actionPlanTask The updated task
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanTaskInstance> updateAsync(ActionPlanTaskInstance actionPlanTask, final ServiceCallback<ActionPlanTaskInstance> serviceCallback);

    /**
     * Patch an update for an action plan task.
     *
     * @param actionPlanTask The updated task
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskInstance object
     */
    Observable<ActionPlanTaskInstance> updateAsync(ActionPlanTaskInstance actionPlanTask);

    /**
     * Patch an update for an action plan task.
     *
     * @param actionPlanTask The updated task
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskInstance object
     */
    Observable<ServiceResponse<ActionPlanTaskInstance>> updateWithServiceResponseAsync(ActionPlanTaskInstance actionPlanTask);

    /**
     * Validate tracking for an action plan task.
     *
     * @param trackingValidation The tracking validation information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTaskTrackingResponseActionPlanTaskTracking object if successful.
     */
    ActionPlanTaskTrackingResponseActionPlanTaskTracking validateTracking(TrackingValidation trackingValidation);

    /**
     * Validate tracking for an action plan task.
     *
     * @param trackingValidation The tracking validation information.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanTaskTrackingResponseActionPlanTaskTracking> validateTrackingAsync(TrackingValidation trackingValidation, final ServiceCallback<ActionPlanTaskTrackingResponseActionPlanTaskTracking> serviceCallback);

    /**
     * Validate tracking for an action plan task.
     *
     * @param trackingValidation The tracking validation information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskTrackingResponseActionPlanTaskTracking object
     */
    Observable<ActionPlanTaskTrackingResponseActionPlanTaskTracking> validateTrackingAsync(TrackingValidation trackingValidation);

    /**
     * Validate tracking for an action plan task.
     *
     * @param trackingValidation The tracking validation information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskTrackingResponseActionPlanTaskTracking object
     */
    Observable<ServiceResponse<ActionPlanTaskTrackingResponseActionPlanTaskTracking>> validateTrackingWithServiceResponseAsync(TrackingValidation trackingValidation);

}
