/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.healthvault.restapi.implementation;

import retrofit2.Retrofit;
import com.microsoft.healthvault.restapi.ActionPlanTasks;
import com.google.common.reflect.TypeToken;
import com.microsoft.healthvault.restapi.models.ActionPlanTask;
import com.microsoft.healthvault.restapi.models.ActionPlanTaskInstance;
import com.microsoft.healthvault.restapi.models.ActionPlanTasksResponseActionPlanTaskInstance;
import com.microsoft.healthvault.restapi.models.ActionPlanTaskTrackingResponseActionPlanTaskTracking;
import com.microsoft.healthvault.restapi.models.ErrorResponseException;
import com.microsoft.healthvault.restapi.models.TrackingValidation;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.UUID;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ActionPlanTasks.
 */
public class ActionPlanTasksImpl implements ActionPlanTasks {
    /** The Retrofit service to perform REST calls. */
    private ActionPlanTasksService service;
    /** The service client containing this operation class. */
    private MicrosoftHealthVaultRESTAPIImpl client;

    /**
     * Initializes an instance of ActionPlanTasks.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ActionPlanTasksImpl(Retrofit retrofit, MicrosoftHealthVaultRESTAPIImpl client) {
        this.service = retrofit.create(ActionPlanTasksService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ActionPlanTasks to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ActionPlanTasksService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.healthvault.restapi.ActionPlanTasks getById" })
        @GET("ActionPlanTasks/{actionPlanTaskId}")
        Observable<Response<ResponseBody>> getById(@Path("actionPlanTaskId") UUID actionPlanTaskId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.healthvault.restapi.ActionPlanTasks delete" })
        @HTTP(path = "ActionPlanTasks/{actionPlanTaskId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("actionPlanTaskId") UUID actionPlanTaskId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.healthvault.restapi.ActionPlanTasks get" })
        @GET("ActionPlanTasks")
        Observable<Response<ResponseBody>> get(@Query("actionPlanTaskStatus") String actionPlanTaskStatus, @Query("maxPageSize") Integer maxPageSize);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.healthvault.restapi.ActionPlanTasks replace" })
        @PUT("ActionPlanTasks")
        Observable<Response<ResponseBody>> replace(@Body ActionPlanTaskInstance actionPlanTask);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.healthvault.restapi.ActionPlanTasks create" })
        @POST("ActionPlanTasks")
        Observable<Response<ResponseBody>> create(@Body ActionPlanTask actionPlanTask);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.healthvault.restapi.ActionPlanTasks update" })
        @PATCH("ActionPlanTasks")
        Observable<Response<ResponseBody>> update(@Body ActionPlanTaskInstance actionPlanTask);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.healthvault.restapi.ActionPlanTasks validateTracking" })
        @POST("ActionPlanTasks/ValidateTracking")
        Observable<Response<ResponseBody>> validateTracking(@Body TrackingValidation trackingValidation);

    }

    /**
     * Get a task by id.
     *
     * @param actionPlanTaskId The unique identifer of the task.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTaskInstance object if successful.
     */
    public ActionPlanTaskInstance getById(UUID actionPlanTaskId) {
        return getByIdWithServiceResponseAsync(actionPlanTaskId).toBlocking().single().body();
    }

    /**
     * Get a task by id.
     *
     * @param actionPlanTaskId The unique identifer of the task.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlanTaskInstance> getByIdAsync(UUID actionPlanTaskId, final ServiceCallback<ActionPlanTaskInstance> serviceCallback) {
        return ServiceFuture.fromResponse(getByIdWithServiceResponseAsync(actionPlanTaskId), serviceCallback);
    }

    /**
     * Get a task by id.
     *
     * @param actionPlanTaskId The unique identifer of the task.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskInstance object
     */
    public Observable<ActionPlanTaskInstance> getByIdAsync(UUID actionPlanTaskId) {
        return getByIdWithServiceResponseAsync(actionPlanTaskId).map(new Func1<ServiceResponse<ActionPlanTaskInstance>, ActionPlanTaskInstance>() {
            @Override
            public ActionPlanTaskInstance call(ServiceResponse<ActionPlanTaskInstance> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a task by id.
     *
     * @param actionPlanTaskId The unique identifer of the task.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskInstance object
     */
    public Observable<ServiceResponse<ActionPlanTaskInstance>> getByIdWithServiceResponseAsync(UUID actionPlanTaskId) {
        if (actionPlanTaskId == null) {
            throw new IllegalArgumentException("Parameter actionPlanTaskId is required and cannot be null.");
        }
        return service.getById(actionPlanTaskId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlanTaskInstance>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlanTaskInstance>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlanTaskInstance> clientResponse = getByIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActionPlanTaskInstance> getByIdDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ActionPlanTaskInstance, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ActionPlanTaskInstance>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Delete a task by id.
     *
     * @param actionPlanTaskId The unique identifer of the task.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(UUID actionPlanTaskId) {
        deleteWithServiceResponseAsync(actionPlanTaskId).toBlocking().single().body();
    }

    /**
     * Delete a task by id.
     *
     * @param actionPlanTaskId The unique identifer of the task.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(UUID actionPlanTaskId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(actionPlanTaskId), serviceCallback);
    }

    /**
     * Delete a task by id.
     *
     * @param actionPlanTaskId The unique identifer of the task.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(UUID actionPlanTaskId) {
        return deleteWithServiceResponseAsync(actionPlanTaskId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a task by id.
     *
     * @param actionPlanTaskId The unique identifer of the task.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(UUID actionPlanTaskId) {
        if (actionPlanTaskId == null) {
            throw new IllegalArgumentException("Parameter actionPlanTaskId is required and cannot be null.");
        }
        return service.delete(actionPlanTaskId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get a collection of task definitions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTasksResponseActionPlanTaskInstance object if successful.
     */
    public ActionPlanTasksResponseActionPlanTaskInstance get() {
        return getWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Get a collection of task definitions.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlanTasksResponseActionPlanTaskInstance> getAsync(final ServiceCallback<ActionPlanTasksResponseActionPlanTaskInstance> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get a collection of task definitions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    public Observable<ActionPlanTasksResponseActionPlanTaskInstance> getAsync() {
        return getWithServiceResponseAsync().map(new Func1<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>, ActionPlanTasksResponseActionPlanTaskInstance>() {
            @Override
            public ActionPlanTasksResponseActionPlanTaskInstance call(ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a collection of task definitions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    public Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>> getWithServiceResponseAsync() {
        final String actionPlanTaskStatus = null;
        final Integer maxPageSize = null;
        return service.get(actionPlanTaskStatus, maxPageSize)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get a collection of task definitions.
     *
     * @param actionPlanTaskStatus An optional status used to filter the results. Possible values include: 'Unknown', 'Archived', 'InProgress', 'Recommended', 'Completed', 'Template'
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTasksResponseActionPlanTaskInstance object if successful.
     */
    public ActionPlanTasksResponseActionPlanTaskInstance get(String actionPlanTaskStatus, Integer maxPageSize) {
        return getWithServiceResponseAsync(actionPlanTaskStatus, maxPageSize).toBlocking().single().body();
    }

    /**
     * Get a collection of task definitions.
     *
     * @param actionPlanTaskStatus An optional status used to filter the results. Possible values include: 'Unknown', 'Archived', 'InProgress', 'Recommended', 'Completed', 'Template'
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlanTasksResponseActionPlanTaskInstance> getAsync(String actionPlanTaskStatus, Integer maxPageSize, final ServiceCallback<ActionPlanTasksResponseActionPlanTaskInstance> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(actionPlanTaskStatus, maxPageSize), serviceCallback);
    }

    /**
     * Get a collection of task definitions.
     *
     * @param actionPlanTaskStatus An optional status used to filter the results. Possible values include: 'Unknown', 'Archived', 'InProgress', 'Recommended', 'Completed', 'Template'
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    public Observable<ActionPlanTasksResponseActionPlanTaskInstance> getAsync(String actionPlanTaskStatus, Integer maxPageSize) {
        return getWithServiceResponseAsync(actionPlanTaskStatus, maxPageSize).map(new Func1<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>, ActionPlanTasksResponseActionPlanTaskInstance>() {
            @Override
            public ActionPlanTasksResponseActionPlanTaskInstance call(ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a collection of task definitions.
     *
     * @param actionPlanTaskStatus An optional status used to filter the results. Possible values include: 'Unknown', 'Archived', 'InProgress', 'Recommended', 'Completed', 'Template'
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    public Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>> getWithServiceResponseAsync(String actionPlanTaskStatus, Integer maxPageSize) {
        return service.get(actionPlanTaskStatus, maxPageSize)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException {
        return this.client.restClient().responseBuilderFactory().<ActionPlanTasksResponseActionPlanTaskInstance, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ActionPlanTasksResponseActionPlanTaskInstance>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Put an update for an action plan task.
     *
     * @param actionPlanTask The updated action plan task.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTaskInstance object if successful.
     */
    public ActionPlanTaskInstance replace(ActionPlanTaskInstance actionPlanTask) {
        return replaceWithServiceResponseAsync(actionPlanTask).toBlocking().single().body();
    }

    /**
     * Put an update for an action plan task.
     *
     * @param actionPlanTask The updated action plan task.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlanTaskInstance> replaceAsync(ActionPlanTaskInstance actionPlanTask, final ServiceCallback<ActionPlanTaskInstance> serviceCallback) {
        return ServiceFuture.fromResponse(replaceWithServiceResponseAsync(actionPlanTask), serviceCallback);
    }

    /**
     * Put an update for an action plan task.
     *
     * @param actionPlanTask The updated action plan task.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskInstance object
     */
    public Observable<ActionPlanTaskInstance> replaceAsync(ActionPlanTaskInstance actionPlanTask) {
        return replaceWithServiceResponseAsync(actionPlanTask).map(new Func1<ServiceResponse<ActionPlanTaskInstance>, ActionPlanTaskInstance>() {
            @Override
            public ActionPlanTaskInstance call(ServiceResponse<ActionPlanTaskInstance> response) {
                return response.body();
            }
        });
    }

    /**
     * Put an update for an action plan task.
     *
     * @param actionPlanTask The updated action plan task.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskInstance object
     */
    public Observable<ServiceResponse<ActionPlanTaskInstance>> replaceWithServiceResponseAsync(ActionPlanTaskInstance actionPlanTask) {
        if (actionPlanTask == null) {
            throw new IllegalArgumentException("Parameter actionPlanTask is required and cannot be null.");
        }
        Validator.validate(actionPlanTask);
        return service.replace(actionPlanTask)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlanTaskInstance>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlanTaskInstance>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlanTaskInstance> clientResponse = replaceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActionPlanTaskInstance> replaceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ActionPlanTaskInstance, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ActionPlanTaskInstance>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Post a new action plan task.
     *
     * @param actionPlanTask The action plan task to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTaskInstance object if successful.
     */
    public ActionPlanTaskInstance create(ActionPlanTask actionPlanTask) {
        return createWithServiceResponseAsync(actionPlanTask).toBlocking().single().body();
    }

    /**
     * Post a new action plan task.
     *
     * @param actionPlanTask The action plan task to create.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlanTaskInstance> createAsync(ActionPlanTask actionPlanTask, final ServiceCallback<ActionPlanTaskInstance> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(actionPlanTask), serviceCallback);
    }

    /**
     * Post a new action plan task.
     *
     * @param actionPlanTask The action plan task to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskInstance object
     */
    public Observable<ActionPlanTaskInstance> createAsync(ActionPlanTask actionPlanTask) {
        return createWithServiceResponseAsync(actionPlanTask).map(new Func1<ServiceResponse<ActionPlanTaskInstance>, ActionPlanTaskInstance>() {
            @Override
            public ActionPlanTaskInstance call(ServiceResponse<ActionPlanTaskInstance> response) {
                return response.body();
            }
        });
    }

    /**
     * Post a new action plan task.
     *
     * @param actionPlanTask The action plan task to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskInstance object
     */
    public Observable<ServiceResponse<ActionPlanTaskInstance>> createWithServiceResponseAsync(ActionPlanTask actionPlanTask) {
        if (actionPlanTask == null) {
            throw new IllegalArgumentException("Parameter actionPlanTask is required and cannot be null.");
        }
        Validator.validate(actionPlanTask);
        return service.create(actionPlanTask)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlanTaskInstance>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlanTaskInstance>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlanTaskInstance> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActionPlanTaskInstance> createDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ActionPlanTaskInstance, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<ActionPlanTaskInstance>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Patch an update for an action plan task.
     *
     * @param actionPlanTask The updated task
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTaskInstance object if successful.
     */
    public ActionPlanTaskInstance update(ActionPlanTaskInstance actionPlanTask) {
        return updateWithServiceResponseAsync(actionPlanTask).toBlocking().single().body();
    }

    /**
     * Patch an update for an action plan task.
     *
     * @param actionPlanTask The updated task
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlanTaskInstance> updateAsync(ActionPlanTaskInstance actionPlanTask, final ServiceCallback<ActionPlanTaskInstance> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(actionPlanTask), serviceCallback);
    }

    /**
     * Patch an update for an action plan task.
     *
     * @param actionPlanTask The updated task
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskInstance object
     */
    public Observable<ActionPlanTaskInstance> updateAsync(ActionPlanTaskInstance actionPlanTask) {
        return updateWithServiceResponseAsync(actionPlanTask).map(new Func1<ServiceResponse<ActionPlanTaskInstance>, ActionPlanTaskInstance>() {
            @Override
            public ActionPlanTaskInstance call(ServiceResponse<ActionPlanTaskInstance> response) {
                return response.body();
            }
        });
    }

    /**
     * Patch an update for an action plan task.
     *
     * @param actionPlanTask The updated task
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskInstance object
     */
    public Observable<ServiceResponse<ActionPlanTaskInstance>> updateWithServiceResponseAsync(ActionPlanTaskInstance actionPlanTask) {
        if (actionPlanTask == null) {
            throw new IllegalArgumentException("Parameter actionPlanTask is required and cannot be null.");
        }
        Validator.validate(actionPlanTask);
        return service.update(actionPlanTask)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlanTaskInstance>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlanTaskInstance>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlanTaskInstance> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActionPlanTaskInstance> updateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ActionPlanTaskInstance, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ActionPlanTaskInstance>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Validate tracking for an action plan task.
     *
     * @param trackingValidation The tracking validation information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTaskTrackingResponseActionPlanTaskTracking object if successful.
     */
    public ActionPlanTaskTrackingResponseActionPlanTaskTracking validateTracking(TrackingValidation trackingValidation) {
        return validateTrackingWithServiceResponseAsync(trackingValidation).toBlocking().single().body();
    }

    /**
     * Validate tracking for an action plan task.
     *
     * @param trackingValidation The tracking validation information.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlanTaskTrackingResponseActionPlanTaskTracking> validateTrackingAsync(TrackingValidation trackingValidation, final ServiceCallback<ActionPlanTaskTrackingResponseActionPlanTaskTracking> serviceCallback) {
        return ServiceFuture.fromResponse(validateTrackingWithServiceResponseAsync(trackingValidation), serviceCallback);
    }

    /**
     * Validate tracking for an action plan task.
     *
     * @param trackingValidation The tracking validation information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskTrackingResponseActionPlanTaskTracking object
     */
    public Observable<ActionPlanTaskTrackingResponseActionPlanTaskTracking> validateTrackingAsync(TrackingValidation trackingValidation) {
        return validateTrackingWithServiceResponseAsync(trackingValidation).map(new Func1<ServiceResponse<ActionPlanTaskTrackingResponseActionPlanTaskTracking>, ActionPlanTaskTrackingResponseActionPlanTaskTracking>() {
            @Override
            public ActionPlanTaskTrackingResponseActionPlanTaskTracking call(ServiceResponse<ActionPlanTaskTrackingResponseActionPlanTaskTracking> response) {
                return response.body();
            }
        });
    }

    /**
     * Validate tracking for an action plan task.
     *
     * @param trackingValidation The tracking validation information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskTrackingResponseActionPlanTaskTracking object
     */
    public Observable<ServiceResponse<ActionPlanTaskTrackingResponseActionPlanTaskTracking>> validateTrackingWithServiceResponseAsync(TrackingValidation trackingValidation) {
        if (trackingValidation == null) {
            throw new IllegalArgumentException("Parameter trackingValidation is required and cannot be null.");
        }
        Validator.validate(trackingValidation);
        return service.validateTracking(trackingValidation)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlanTaskTrackingResponseActionPlanTaskTracking>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlanTaskTrackingResponseActionPlanTaskTracking>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlanTaskTrackingResponseActionPlanTaskTracking> clientResponse = validateTrackingDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActionPlanTaskTrackingResponseActionPlanTaskTracking> validateTrackingDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ActionPlanTaskTrackingResponseActionPlanTaskTracking, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ActionPlanTaskTrackingResponseActionPlanTaskTracking>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
