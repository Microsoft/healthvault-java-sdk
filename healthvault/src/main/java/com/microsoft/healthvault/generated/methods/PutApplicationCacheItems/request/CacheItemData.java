//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.08 at 12:00:41 PM PDT 
//


package com.microsoft.healthvault.generated.methods.PutApplicationCacheItems.request;

import java.util.Date;
import org.simpleframework.xml.Element;
import org.simpleframework.xml.Order;
import org.simpleframework.xml.Root;


/**
 * 
 * <pre>
 * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;summary xmlns="http://www.w3.org/2001/XMLSchema" xmlns:this="urn:com.microsoft.wc.methods.PutApplicationCacheItems" xmlns:wc-types="urn:com.microsoft.wc.types"&gt;
 *                     The cache value to be updated, encoded in Base64.
 *                 &lt;/summary&gt;
 * </pre>
 * 
 * <pre>
 * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;remarks xmlns="http://www.w3.org/2001/XMLSchema" xmlns:this="urn:com.microsoft.wc.methods.PutApplicationCacheItems" xmlns:wc-types="urn:com.microsoft.wc.types"&gt;
 *                     When overwrite is false, and old data version identifier is not
 *                     specified, the cache item will be inserted if an item with the
 *                     same key does not exist.  If an item with the same key exists, the
 *                     new cache item will not replace it, the operation is considered
 *                     unsuccessful, and the response will therefore not include the
 *                     cache item's key.
 * 
 *                     When overwrite is true, the item will be inserted regardless of
 *                     whether an item with the same key already exists.  If an item already
 *                     exists, the new one will replace it.
 * 
 *                     An old data version identifier may be specified, which allows
 *                     for optimistic concurrency control. The cache item will only
 *                     update an existing cache item with a matching key and only
 *                     if the specified old data version identifier matches the version
 *                     identifier of the data currently cached.  If the version
 *                     identifiers do not match, or if the item does not exist, the
 *                     optimistic concurrency condition is not met, and the operation
 *                     is considered unsucessful.
 * 
 *                     If overwrite is true, an old data version identifier may not
 *                     be specified.
 *                 &lt;/remarks&gt;
 * </pre>
 * 
 * 
 * <p>Java class for CacheItemData complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CacheItemData">
 *   &lt;simpleContent>
 *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>base64Binary">
 *       &lt;attribute name="overwrite" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *       &lt;attribute name="old-version-id" type="{urn:com.microsoft.wc.types}stringnz256" />
 *     &lt;/extension>
 *   &lt;/simpleContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@Root(name="")
@Order(elements = {
    "value"
})
public class CacheItemData {

    protected byte[] value;
    @Element(name = "overwrite")
    protected Boolean overwrite;
    @Element(name = "old-version-id")
    protected String oldVersionId;

    /**
     * Gets the value of the value property.
     * 
     * @return
     *     possible object is
     *     byte[]
     */
    public byte[] getValue() {
        return value;
    }

    /**
     * Sets the value of the value property.
     * 
     * @param value
     *     allowed object is
     *     byte[]
     */
    public void setValue(byte[] value) {
        this.value = value;
    }

    /**
     * Gets the value of the overwrite property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isOverwrite() {
        if (overwrite == null) {
            return false;
        } else {
            return overwrite;
        }
    }

    /**
     * Sets the value of the overwrite property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setOverwrite(Boolean value) {
        this.overwrite = value;
    }

    /**
     * Gets the value of the oldVersionId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOldVersionId() {
        return oldVersionId;
    }

    /**
     * Sets the value of the oldVersionId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOldVersionId(String value) {
        this.oldVersionId = value;
    }

}
